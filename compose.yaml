services:
  server:
    build:
      context: .
    container_name: restaurant-server
    hostname: restaurant-server
    environment:
      TZ: ${TZ}
      PORT: ${PORT}
      HOST: ${HOST}
      LOG_LEVEL: ${LOG_LEVEL}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      APP_KEY: ${APP_KEY}
      STRIPE_API_KEY: ${STRIPE_API_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      EMAIL_NAME: ${EMAIL_NAME}
      EMAIL_FROM: ${EMAIL_FROM}
    depends_on:
      - postgres
      - redis-server-cache
    ports:
      - ${PORT}:${PORT}
    networks:
      - restaurant-network
  postgres:
    image: postgres:16-alpine
    container_name: restaurant-postgres
    restart: always
    user: ${DB_USER}
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - ${DB_PORT}:${DB_PORT}
    expose:
      - ${DB_PORT}
    healthcheck:
      test: ['CMD', 'pg_isready']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - restaurant-network
  redis-server-cache:
    image: redis/redis-stack-server:7.4.0-v0
    container_name: redis-server-cache
    hostname: redis-server-cache
    ports:
      - 6379:6379
      - 8001:8001
    networks:
      - restaurant-network
volumes:
  db-data:

networks:
  restaurant-network:
    external: true
